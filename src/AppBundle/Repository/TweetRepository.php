<?php

namespace AppBundle\Repository;

/**
 * TweetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TweetRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByHasgtag($hashtag){
        $qb=$this->getEntityManager()->createQueryBuilder();
        return $qb->select('tweet')
            ->from('AppBundle:Tweet', 'tweet')
            ->where($qb->expr()->like('tweet.hashtags', '?1'))
            ->setParameter(1, "%$hashtag%")
            ->getQuery()
            ->getResult();
    }

    public function findAllCategories()
    {
        $qb=$this->getEntityManager()->createQueryBuilder();
        $results = $qb->select('tweet.category')->distinct()
            ->from('AppBundle:Tweet', 'tweet')
            ->getQuery()
            ->getResult();
        $simplecat = [];
        foreach($results as $result){
            array_push($simplecat, $result['category']);
        }
        return $simplecat;

    }

    public function findNthCategories($nbcategories)
    {
        $qb=$this->getEntityManager()->createQueryBuilder();
            $results = $qb->select('tweet.category, COUNT(tweet.category) AS nbcat' )
                ->from('AppBundle:Tweet', 'tweet')
                ->groupBy('tweet.category')
                ->orderBy('nbcat', 'DESC')
                ->setMaxResults($nbcategories)
                ->getQuery()
                ->getResult();
        $categories= [];
        foreach($results as $result){
            $categories[strtolower($result['category'])] = $result['nbcat'];
        }
        return $categories;
    }

    public function findNthHashtags($nbhashtags)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $results = $qb->select('tweet.hashtags')
            ->from('AppBundle:Tweet', 'tweet')
            ->getQuery()
            ->getScalarResult();
        $hashtags= [];
        foreach($results as $result){
            array_push($hashtags,$result['hashtags']);
        }
        $finalHashtags = [];
        foreach($hashtags as $hashtag) {
            foreach (explode(',', $hashtag) as $hash) {
                array_push($finalHashtags, strtolower($hash));
            }
        }
        $finalHash= array_count_values($finalHashtags);
        asort($finalHash);
        return array_slice(array_reverse($finalHash), 0, $nbhashtags);

    }
}
